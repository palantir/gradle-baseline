import net.ltgt.gradle.errorprone.CheckSeverity

apply plugin: 'java-library'
apply plugin: 'com.palantir.external-publish-jar'

dependencies {
    implementation 'com.google.errorprone:error_prone_core'
    // Ensure a new enough version of dataflow-errorprone is available
    implementation 'org.checkerframework:dataflow-errorprone'
    runtimeOnly 'org.mockito:mockito-errorprone'

    testImplementation gradleApi()
    testImplementation 'com.palantir.tokens:auth-tokens'
    testImplementation 'com.fasterxml.jackson.core:jackson-annotations'
    testImplementation 'com.google.errorprone:error_prone_test_helpers'
    testImplementation 'com.palantir.safe-logging:preconditions'
    testImplementation 'com.palantir.safe-logging:preconditions-assertj'
    testImplementation 'com.palantir.safe-logging:safe-logging'
    testImplementation 'com.palantir.safe-logging:logger'
    testImplementation 'org.slf4j:slf4j-api'
    testImplementation 'org.apache.commons:commons-lang3'
    testImplementation 'commons-lang:commons-lang'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.immutables:value::annotations'
    testImplementation 'org.jooq:jooq'
    testImplementation 'com.palantir.tritium:tritium-registry'
    testImplementation 'com.palantir.conjure.java:conjure-lib'
    testImplementation 'com.palantir.conjure.java.api:test-utils'
    testCompileOnly 'org.immutables:value::annotations'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-migrationsupport'
    testRuntimeOnly 'one.util:streamex'
    testRuntimeOnly 'com.fasterxml.jackson.module:jackson-module-afterburner'

    annotationProcessor 'com.google.auto.service:auto-service'
    compileOnly 'org.immutables:value::annotations'
    annotationProcessor 'org.immutables:value'
    testAnnotationProcessor 'org.immutables:value'
    compileOnly 'com.google.auto.service:auto-service'
}

// Incorrectly identifies tests as junit4 usage
tasks.checkJUnitDependencies.enabled = false
tasks.withType(JavaCompile) {
    options.errorprone {
        check("StrictUnusedVariable", CheckSeverity.OFF)
    }
}

// This is necessary to prevent the errorprone plugin from using this very project's output directory
// TODO(dsanduleac): this might not be necessary in gradle 6 anymore
def originalGroup = project.group
group = originalGroup + '-internal'
publishing.publications.maven {
    groupId = originalGroup
}

moduleJvmArgs {
    exports = [
        'jdk.compiler/com.sun.tools.javac.api',
        'jdk.compiler/com.sun.tools.javac.file',
        'jdk.compiler/com.sun.tools.javac.code',
        'jdk.compiler/com.sun.tools.javac.util',
        'jdk.compiler/com.sun.tools.javac.comp',
        'jdk.compiler/com.sun.tools.javac.main',
        'jdk.compiler/com.sun.tools.javac.model',
        'jdk.compiler/com.sun.tools.javac.parser',
        'jdk.compiler/com.sun.tools.javac.processing',
        'jdk.compiler/com.sun.tools.javac.tree',
        'jdk.compiler/com.sun.tools.javac.util'
    ]
    opens = ['jdk.compiler/com.sun.tools.javac.comp']
}