apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.external-publish-gradle-plugin'

import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

dependencies {
    implementation project(':gradle-junit-reports')
    implementation gradleApi()
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.diffplug.spotless:spotless-plugin-gradle'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'com.google.guava:guava'
    implementation 'net.ltgt.gradle:gradle-errorprone-plugin'
    // implementation 'com.github.sgtsilvio.gradle.proguard:com.github.sgtsilvio.gradle.proguard.gradle.plugin'
    implementation 'com.github.sgtsilvio.gradle:gradle-proguard'
    implementation 'org.apache.maven.shared:maven-dependency-analyzer', {
        // Use maven-core rather than the legacy maven-project component
        exclude group: 'org.apache.maven', module: 'maven-project'
    }
    runtimeOnly 'org.apache.maven:maven-core'

    implementation 'commons-lang:commons-lang'
    implementation 'com.palantir.javaformat:palantir-java-format-spi'
    // Add an explicit dependency to ensure consumers can use JDK14 source compat
    implementation 'org.ow2.asm:asm'
    implementation 'com.googlecode.java-diff-utils:diffutils'
    implementation 'com.palantir.gradle.utils:lazily-configured-mapping'

    runtimeOnly 'com.palantir.javaformat:gradle-palantir-java-format'

    testImplementation gradleTestKit()
    testImplementation 'com.github.stefanbirkner:system-rules'
    testImplementation 'com.netflix.nebula:nebula-test' // for better temp directory junit rule only
    testImplementation 'junit:junit'
    testImplementation 'net.lingala.zip4j:zip4j'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine', {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    // necessary because of https://github.com/gradle/gradle/issues/16774
    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
            .getModule("gradle-tooling-api-builders")
            .classpath
            .asFiles
            .first()
    testRuntimeOnly(files(toolingApiBuildersJar))

    annotationProcessor 'org.inferred:freebuilder'
    compileOnly 'org.inferred:freebuilder'
    annotationProcessor 'org.immutables:value'
    compileOnly 'org.immutables:value::annotations'
}

tasks.test.dependsOn tasks.findByPath(':gradle-baseline-java-config:publishToMavenLocal')
tasks.test.dependsOn tasks.findByPath(':baseline-error-prone:publishToMavenLocal')
tasks.test.dependsOn tasks.findByPath(':baseline-null-away:publishToMavenLocal')
tasks.test.dependsOn tasks.publishToMavenLocal

test {
    environment 'CIRCLE_ARTIFACTS', "${buildDir}/artifacts"
    environment 'CIRCLE_TEST_REPORTS', "${buildDir}/circle-reports"
    systemProperty 'ignoreDeprecations', 'true'
}

gradlePlugin {
    plugins {
        baselinePlugins {
            id = 'com.palantir.baseline'
            displayName = 'Palantir Baseline Plugins'
            implementationClass = 'com.palantir.baseline.plugins.Baseline'
        }
        baselineCheckstylePlugin {
            id = 'com.palantir.baseline-checkstyle'
            displayName = 'Palantir Baseline Checkstyle Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineCheckstyle'
        }
        baselineConfigPlugin {
            id = 'com.palantir.baseline-config'
            displayName = 'Palantir Baseline Configuration Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineConfig'
        }
        baselineExactDependenciesPlugin {
            id = 'com.palantir.baseline-exact-dependencies'
            displayName = 'Palantir Baseline Exact Dependencies Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineExactDependencies'
        }
        baselineEclipsePlugin {
            id = 'com.palantir.baseline-eclipse'
            displayName = 'Palantir Baseline Eclipse Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineEclipse'
        }
        baselineIdeaPlugin {
            id = 'com.palantir.baseline-idea'
            displayName = 'Palantir Baseline IntelliJ Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineIdea'
        }
        baselineClassUniquenessPlugin {
            id = 'com.palantir.baseline-class-uniqueness'
            displayName = 'Palantir Baseline Class Uniqueness Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineClassUniquenessPlugin'
        }
        baselineCircleCiPlugin {
            id = 'com.palantir.baseline-circleci'
            displayName = 'Palantir Baseline CircleCi Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineCircleCi'
        }
        baselineReleaseCompatibility {
            id = 'com.palantir.baseline-release-compatibility'
            displayName = 'Palantir Baseline Release Compatibility Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineReleaseCompatibility'
        }
        baselinePreferProjectModules {
            id = 'com.palantir.baseline-prefer-project-modules'
            displayName = 'Palantir Baseline Prefer Project Modules Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselinePreferProjectModules'
        }
        baselineDeadCode {
            id = 'com.palantir.baseline-dead-code'
            displayName = 'Palantir Baseline Dead Code Plugin'
            implementationClass = 'com.palantir.baseline.plugins.BaselineDeadCode'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-baseline'
    vcsUrl = 'https://github.com/palantir/gradle-baseline'
    description = 'Baseline Java is a collection of Gradle plugins for configuring code quality tools in builds and generated Eclipse/IntelliJ projects.'
    tags = ['java', 'checkstyle', 'code quality', 'eclipse', 'idea']
}

tasks.named('processResources').configure {
    duplicatesStrategy 'include'
}

// Run `./gradlew test -Drecreate=true` to recreate all the expected
// generated code that we have checked into the repo.
tasks.withType(Test) {
    systemProperty 'recreate', System.getProperty('recreate', 'false')
}

configurations {
    checkstyleVersion
}

dependencies {
    checkstyleVersion 'com.puppycrawl.tools:checkstyle'
}

task writeCheckstyleVersion() {
    doLast {
        file('src/main/resources/checkstyle.version').text = getVersion('com.puppycrawl.tools', 'checkstyle', configurations.checkstyleVersion)
    }
}

if (gradle.startParameter.isWriteDependencyLocks()) {
    gradle.startParameter.taskNames += 'writeCheckstyleVersion'
}
