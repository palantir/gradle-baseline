apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply from: "${rootDir}/gradle/publish-libs.gradle"
apply from: "${rootDir}/gradle/java.gradle"

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()

    testCompile gradleTestKit()
    testCompile 'com.netflix.nebula:nebula-test' // for better temp directory junit rule only
    testCompile 'com.google.guava:guava'
    testCompile 'net.lingala.zip4j:zip4j'
    testCompile 'org.apache.commons:commons-io'
}

if (System.env.CIRCLE_TEST_REPORTS) {
    test.reports.junitXml.destination = new File(System.env.CIRCLE_TEST_REPORTS, project.getName())
}

// Make sure the config artifact is available when the tests run.
evaluationDependsOn(':gradle-baseline-java-config')
test.dependsOn(project(":gradle-baseline-java-config").tasks.getByName("publishToMavenLocal"))
apply plugin: "com.gradle.plugin-publish"

pluginBundle {
    website = 'https://github.com/palantir/gradle-baseline'
    vcsUrl = 'https://github.com/palantir/gradle-baseline'
    description = 'Baseline Java is a collection of Gradle plugins for configuring code quality tools in builds and generated Eclipse/IntelliJ projects.'
    tags = ['java', 'checkstyle', 'code quality', 'eclipse', 'idea']

    plugins {
        baselinePlugins {
            id = 'com.palantir.baseline'
            displayName = 'Palantir Baseline Plugins'
        }
        baselineCheckstylePlugin {
            id = 'com.palantir.baseline-checkstyle'
            displayName = 'Palantir Baseline Checkstyle Plugin'
        }
        baselineConfigPlugin {
            id = 'com.palantir.baseline-config'
            displayName = 'Palantir Baseline Configuration Plugin'
        }
        baselineEclipsePlugin {
            id = 'com.palantir.baseline-eclipse'
            displayName = 'Palantir Baseline Eclipse Plugin'
        }
        baselineIdeaPlugin {
            id = 'com.palantir.baseline-idea'
            displayName = 'Palantir Baseline IntelliJ Plugin'
        }
    }
}

