apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'java-library'
apply plugin: 'com.palantir.external-publish-jar'

dependencies {
    compile project(':gradle-junit-reports')
    compile gradleApi()
    compile 'org.apache.commons:commons-lang3'
    compile 'com.diffplug.spotless:spotless-plugin-gradle'
    compile 'com.google.errorprone:error_prone_refaster'
    compile 'com.google.guava:guava'
    compile 'net.ltgt.gradle:gradle-errorprone-plugin'
    compile 'org.apache.maven.shared:maven-dependency-analyzer'
    compile 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11'
    implementation 'com.palantir.javaformat:palantir-java-format-spi'
    // Add an explicit dependency to ensure consumers can use JDK14 source compat
    implementation 'org.ow2.asm:asm'
    implementation 'com.googlecode.java-diff-utils:diffutils'

    runtimeOnly 'com.palantir.javaformat:gradle-palantir-java-format'

    testCompile gradleTestKit()
    testCompile 'com.github.stefanbirkner:system-rules'
    testCompile 'com.netflix.nebula:nebula-test' // for better temp directory junit rule only
    testCompile 'junit:junit'
    testCompile 'net.lingala.zip4j:zip4j'
    testCompile 'org.assertj:assertj-core'

    annotationProcessor 'org.inferred:freebuilder'
    compileOnly 'org.inferred:freebuilder'
}

tasks.test.dependsOn tasks.findByPath(':gradle-baseline-java-config:publishToMavenLocal')
tasks.test.dependsOn tasks.findByPath(':baseline-error-prone:publishToMavenLocal')
tasks.test.dependsOn tasks.findByPath(':baseline-refaster-javac-plugin:publishToMavenLocal')
tasks.test.dependsOn tasks.findByPath(':baseline-refaster-rules:publishToMavenLocal')
tasks.test.dependsOn tasks.publishToMavenLocal

test {
    environment 'CIRCLE_ARTIFACTS', "${buildDir}/artifacts"
    environment 'CIRCLE_TEST_REPORTS', "${buildDir}/circle-reports"
}

gradlePlugin {
    plugins {
        baselinePlugins {
            id = 'com.palantir.baseline'
            implementationClass = 'com.palantir.baseline.plugins.Baseline'
        }
        baselineCheckstylePlugin {
            id = 'com.palantir.baseline-checkstyle'
            implementationClass = 'com.palantir.baseline.plugins.BaselineCheckstyle'
        }
        baselineConfigPlugin {
            id = 'com.palantir.baseline-config'
            implementationClass = 'com.palantir.baseline.plugins.BaselineConfig'
        }
        baselineExactDependenciesPlugin {
            id = 'com.palantir.baseline-exact-dependencies'
            implementationClass = 'com.palantir.baseline.plugins.BaselineExactDependencies'
        }
        baselineEclipsePlugin {
            id = 'com.palantir.baseline-eclipse'
            implementationClass = 'com.palantir.baseline.plugins.BaselineEclipse'
        }
        baselineIdeaPlugin {
            id = 'com.palantir.baseline-idea'
            implementationClass = 'com.palantir.baseline.plugins.BaselineIdea'
        }
        baselineClassUniquenessPlugin {
            id = 'com.palantir.baseline-class-uniqueness'
            implementationClass = 'com.palantir.baseline.plugins.BaselineClassUniquenessPlugin'
        }
        baselineCircleCiPlugin {
            id = 'com.palantir.baseline-circleci'
            implementationClass = 'com.palantir.baseline.plugins.BaselineCircleCi'
        }
        baselineReleaseCompatibility {
            id = 'com.palantir.baseline-release-compatibility'
            implementationClass = 'com.palantir.baseline.plugins.BaselineReleaseCompatibility'
        }
        baselineEnablePreviewFlag {
            id = 'com.palantir.baseline-enable-preview-flag'
            implementationClass = 'com.palantir.baseline.plugins.BaselineEnablePreviewFlag'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-baseline'
    vcsUrl = 'https://github.com/palantir/gradle-baseline'
    description = 'Baseline Java is a collection of Gradle plugins for configuring code quality tools in builds and generated Eclipse/IntelliJ projects.'
    tags = ['java', 'checkstyle', 'code quality', 'eclipse', 'idea']

    plugins {
        baselinePlugins {
            displayName = 'Palantir Baseline Plugins'
        }
        baselineCheckstylePlugin {
            displayName = 'Palantir Baseline Checkstyle Plugin'
        }
        baselineConfigPlugin {
            displayName = 'Palantir Baseline Configuration Plugin'
        }
        baselineExactDependenciesPlugin {
            displayName = 'Palantir Baseline Exact Dependencies Plugin'
        }
        baselineEclipsePlugin {
            displayName = 'Palantir Baseline Eclipse Plugin'
        }
        baselineIdeaPlugin {
            displayName = 'Palantir Baseline IntelliJ Plugin'
        }
        baselineClassUniquenessPlugin {
            displayName = 'Palantir Baseline Class Uniqueness Plugin'
        }
        baselineCircleCiPlugin {
            displayName = 'Palantir Baseline CircleCi Plugin'
        }
        baselineReleaseCompatibility {
            displayName = 'Palantir Baseline Release Compatibility Plugin'
        }
        baselineEnablePreviewFlag {
            displayName = 'Palantir Baseline --enable-preview Flag Plugin'
        }
    }
}

tasks.publish.dependsOn tasks.publishPlugins
publishPlugins.onlyIf { versionDetails().isCleanTag }
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]

// Run `./gradlew test -Drecreate=true` to recreate all the expected
// generated code that we have checked into the repo.
tasks.withType(Test) {
    systemProperty 'recreate', System.getProperty('recreate', 'false')
}

configurations {
    checkstyleVersion
}

dependencies {
    checkstyleVersion 'com.puppycrawl.tools:checkstyle'
}

task writeCheckstyleVersion() {
    doLast {
        file('src/main/resources/checkstyle.version').text = getVersion('com.puppycrawl.tools', 'checkstyle', configurations.checkstyleVersion)
    }
}

if (gradle.startParameter.isWriteDependencyLocks()) {
    gradle.startParameter.taskNames += 'writeCheckstyleVersion'
}
